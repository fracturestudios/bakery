#ifndef MAKEFILE_H
#define MAKEFILE_H

#include <string>
#include <vector>

/** Generates a Makefile to build bakery's offline and runtime pipelines */
class Makefile
{
public:
    /** Contains configuration parameters about one of the targets the
      * Makefile generated by this program builds during a `make all`
      */
    struct Target
    {
        enum Type
        {
            /** Denotes a program that can be run */
            TYPE_EXECUTABLE,
            
            /** Denotes a library that can be linked against */
            TYPE_LIBRARY,
        };

        /** The name of this target, in the makefile (e.g. bakery for
          * libbakery.so)
          */
        std::string name;

        /** The type of target to generate (library or binary) */
        Type type;

        /** The directory to place the binary in the make all step
          * (does not relate to the make install step)
          */
        std::string buildDir;

        /** The directory where this binary is installed, relative to 
          * to the installation prefix (see Makefile::installDir) 
          */
        std::string installDir;

        /** Compiler directives for adding directories to the include path */
        std::string includes;

        /** Compiler directives for adding directories to the library path */
        std::string libraries;

        /** A list of header files to include in the compiled binary */
        std::vector<std::string> headers;

        /** A list of library files to include in the compiled binary */
        std::vector<std::string> sources;

        /** Compiler directives to pass to the compiler */
        std::string cflags;

        /** Compiler directives to pass to the linker */
        std::string ldflags;
    };

    /** Contains information needed to generate a Makefile directive
      * to copy a file or folder
      */
    struct CopyOperation
    {
        /** The file or folder to copy */
        std::string source;

        /** The directory into which the file or folder should be copied */
        std::string dest;

        /** True for directory copies, false for file copies */
        bool directory;
    };

    /** The targets to build */
    const std::vector<Target> &targets() const;
    std::vector<Target> &targets();

    /** The files / directories to copy during a build */
    const std::vector<CopyOperation> &copies() const;
    std::vector<CopyOperation> copies();

    /** The base directory to install to */
    const std::string &installPrefix() const;
    void setInstallPrefix(const std::string &);

    /** Files and directories to delete during a confclean, in
      * addition to the targets deleted in a normal clean
      */
    const std::vector<std::string> &confcleanTargets() const;
    std::vector<std::string> &confcleanTargets();

    /** Populates the default targets and other configuration settings
      * suitable for building a copy of bakery.
      * The default targets include libbakery.so, libbakeryrt.so, and bake
      */
    void configure();

    /** Generates and returns the contents of the Makefile corresponding
      * to the current configuration of this Makefile object
      */
    std::string generate();

    /** Generates and writes a Makefile to the file at the given path */
    void write(const std::string &path);

private:
    std::vector<Target> m_targets;
    std::vector<CopyOperation> m_copies;
    std::string m_installPrefix;
    std::vector<std::string> m_confcleanTargets;
};

/* TODO
 *
 * Configuration parameters
 * - Includes to copy to the include directory
 *      Should contain includes in src/bakery that aren't offline.h / runtime.h
 *      Should contain includes from each plugin, prefix with plugin name?
 *          If we do that, maybe the uber-header should #include, not embed
 * - Per-binary
 *      - Type (binary or lib)
 *      - Output directory
 *      - Target                $(TARGET)
 *      - Include flags         $(INCLUDES)
 *      - Lib flags             $(LIBS)
 *      - Header list           $(HEADERS)
 *      - Source list           $(SOURCES)
 *      - Cflags                $(CFLAGS)
 *      - Ldflags               $(LDFLAGS)
 * - Parameters for make install
 *      - Prefix
 *      - Targets
 * - Directories to confclean
 * - Should we support version numbers on the binaries we create?
 *
 * Generate by
 *  - Generating per binary lists from the parameters
 *  - Generating copy lists
 *  - Rules to build each target
 *  - Plumbing rules for building %.cpp -> %.o
 *  - Rules to copy files to destinations
 *  - all rule to copy files and build every target
 *  - install rule to copy each built target to the correct prefix dir
 *  - clean rule for deleting intermediate .o files
 *  - confclean rule for deleting dirs created by the configure script
 *  - distclean rule that does clean / confclean / deletes binaries, Makefile
 *
 *  Some other nice things
 *  - Segment per-plugin compilation so we can add echo steps signifying the
 *    begin / end of compilation for a plugin. This way if something kills
 *    compilation you can see whose fault it is and what the Makefile was
 *    trying to build at the time.
 */

#endif
